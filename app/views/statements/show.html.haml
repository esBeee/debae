- provide(:title, t(".title_html", body: body(@statement), default: "Discuss '%{body}'"))
- provide(:description, t(".description_html", body: body(@statement), default: "On this page the statement '%{body}' is being discussed. You can join the debate by adding arguments or comments, or by voting the statement up (in agreement) or down (in disagreement)."))

- unless params[:chain]
  :javascript
    resetChainTo(#{@statement.id});
:javascript
  addToChain(#{@statement.id}, "#{statement_path(@statement)}", "#{body(@statement)}");

.row.d-flex.justify-content-center
  = render 'statement_detailed', statement: @statement

.row
  .col-12.col-lg-6
    .arguments-container.pro
      %h3
        = t("statements.show.headlines.pro_arguments", default: "Pro arguments")
      %div
        - if @pro_arguments.any?
          = render 'statement_argument_links/list', statement_argument_links: @pro_arguments
        - else
          .empty-message.secondary
            = t("statements.show.no_pro_arguments", default: "There are no pro arguments yet.")
      = link_to new_statement_path(pro: @statement.id), class: "btn btn-outline-success" do
        = fa_icon("plus")
        = t("statements.show.links.new_pro_argument", default: "New pro argument")
  .col-12.col-lg-6
    .arguments-container.contra
      %h3
        = t("statements.show.headlines.contra_arguments", default: "Contra arguments")
      %div
        - if @contra_arguments.any?
          = render 'statement_argument_links/list', statement_argument_links: @contra_arguments
        - else
          .empty-message.secondary
            = t("statements.show.no_contra_arguments", default: "There are no contra arguments yet.")
      = link_to new_statement_path(contra: @statement.id), class: "btn btn-outline-danger" do
        = fa_icon("plus")
        = t("statements.show.links.new_contra_argument", default: "New contra argument")

.row.d-flex.justify-content-center
  .col-12.col-lg-8.comments-container
    %h1
      = t("comments.headline")
    .comments-form-container
      = render 'comments/form', commentable: @statement
    = render 'comments/list', comments: @statement.newest_comments
